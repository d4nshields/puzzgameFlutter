// Audio Service Tests (Simplified Version)\n// File: test/core/domain/services/audio_service_test.dart\n\nimport 'package:flutter_test/flutter_test.dart';\nimport 'package:puzzgame_flutter/core/domain/services/audio_service.dart';\nimport 'package:puzzgame_flutter/core/infrastructure/system_audio_service.dart';\n\nvoid main() {\n  group('SystemAudioService', () {\n    late SystemAudioService audioService;\n\n    setUp(() {\n      audioService = SystemAudioService();\n    });\n\n    tearDown(() {\n      audioService.dispose();\n    });\n\n    test('should initialize without errors', () async {\n      // Note: This test may fail in test environment where SystemSound is not available\n      // But the service should handle errors gracefully\n      await expectLater(audioService.initialize(), completes);\n    });\n\n    test('should handle volume setting', () async {\n      await audioService.setVolume(0.7);\n      \n      // Volume should be clamped to valid range\n      await audioService.setVolume(1.5); // Should clamp to 1.0\n      await audioService.setVolume(-0.5); // Should clamp to 0.0\n    });\n\n    test('should handle enable/disable', () async {\n      await audioService.setEnabled(false);\n      await audioService.setEnabled(true);\n    });\n\n    test('should provide debug info', () {\n      final debugInfo = audioService.debugInfo;\n      \n      expect(debugInfo, isA<Map<String, dynamic>>());\n      expect(debugInfo.containsKey('enabled'), isTrue);\n      expect(debugInfo.containsKey('volume'), isTrue);\n      expect(debugInfo.containsKey('initialized'), isTrue);\n    });\n\n    test('should handle audio calls when disabled', () async {\n      await audioService.setEnabled(false);\n      \n      // These should not throw errors even when disabled\n      await expectLater(audioService.playPieceCorrect(), completes);\n      await expectLater(audioService.playPieceIncorrect(), completes);\n      await expectLater(audioService.playPuzzleCompleted(), completes);\n    });\n\n    test('should dispose cleanly', () async {\n      await audioService.initialize();\n      await expectLater(audioService.dispose(), completes);\n    });\n  });\n}\n