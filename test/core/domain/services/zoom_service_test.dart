// Zoom Service Tests (Simplified Version)\n// File: test/core/domain/services/zoom_service_test.dart\n\nimport 'package:flutter/material.dart';\nimport 'package:flutter_test/flutter_test.dart';\nimport 'package:puzzgame_flutter/core/domain/services/zoom_service.dart';\n\nvoid main() {\n  group('DefaultZoomService', () {\n    late DefaultZoomService zoomService;\n\n    setUp(() {\n      zoomService = DefaultZoomService();\n    });\n\n    tearDown(() {\n      zoomService.dispose();\n    });\n\n    test('should initialize with default values', () {\n      expect(zoomService.zoomLevel, equals(1.0));\n      expect(zoomService.minZoom, equals(0.5));\n      expect(zoomService.maxZoom, equals(3.0));\n      expect(zoomService.panOffset, equals(Offset.zero));\n    });\n\n    test('should set zoom level within bounds', () {\n      bool notified = false;\n      zoomService.addListener(() {\n        notified = true;\n      });\n\n      zoomService.setZoom(1.5);\n      \n      expect(zoomService.zoomLevel, equals(1.5));\n      expect(notified, isTrue);\n    });\n\n    test('should clamp zoom level to valid range', () {\n      // Test upper bound\n      zoomService.setZoom(5.0);\n      expect(zoomService.zoomLevel, equals(3.0));\n\n      // Test lower bound\n      zoomService.setZoom(0.1);\n      expect(zoomService.zoomLevel, equals(0.5));\n    });\n\n    test('should not notify listeners if zoom level unchanged', () {\n      zoomService.setZoom(1.0); // Set to current value\n      \n      bool notified = false;\n      zoomService.addListener(() {\n        notified = true;\n      });\n\n      zoomService.setZoom(1.0); // Set to same value again\n      \n      expect(notified, isFalse);\n    });\n\n    test('should adjust zoom by delta', () {\n      zoomService.setZoom(1.0);\n      zoomService.adjustZoom(0.5);\n      \n      expect(zoomService.zoomLevel, equals(1.5));\n      \n      zoomService.adjustZoom(-0.3);\n      expect(zoomService.zoomLevel, equals(1.2));\n    });\n\n    test('should set pan offset', () {\n      bool notified = false;\n      zoomService.addListener(() {\n        notified = true;\n      });\n\n      const newOffset = Offset(10, 20);\n      zoomService.setPanOffset(newOffset);\n      \n      expect(zoomService.panOffset, equals(newOffset));\n      expect(notified, isTrue);\n    });\n\n    test('should not notify listeners if pan offset unchanged', () {\n      const offset = Offset(5, 5);\n      zoomService.setPanOffset(offset);\n      \n      bool notified = false;\n      zoomService.addListener(() {\n        notified = true;\n      });\n\n      zoomService.setPanOffset(offset); // Set to same value\n      \n      expect(notified, isFalse);\n    });\n\n    test('should reset to default values', () {\n      // Change values\n      zoomService.setZoom(2.0);\n      zoomService.setPanOffset(const Offset(100, 100));\n      \n      bool notified = false;\n      zoomService.addListener(() {\n        notified = true;\n      });\n\n      // Reset\n      zoomService.reset();\n      \n      expect(zoomService.zoomLevel, equals(1.0));\n      expect(zoomService.panOffset, equals(Offset.zero));\n      expect(notified, isTrue);\n    });\n\n    test('should fit content to viewport', () {\n      const contentSize = Size(800, 600);\n      const viewportSize = Size(400, 400);\n      \n      bool notified = false;\n      zoomService.addListener(() {\n        notified = true;\n      });\n\n      zoomService.fitToViewport(\n        contentSize: contentSize,\n        viewportSize: viewportSize,\n      );\n      \n      // Should zoom to fit the content within viewport\n      expect(zoomService.zoomLevel, equals(0.5)); // 400/800 = 0.5\n      expect(zoomService.panOffset, equals(Offset.zero));\n      expect(notified, isTrue);\n    });\n\n    test('should respect zoom bounds when fitting to viewport', () {\n      const contentSize = Size(100, 100);\n      const viewportSize = Size(1000, 1000);\n      \n      zoomService.fitToViewport(\n        contentSize: contentSize,\n        viewportSize: viewportSize,\n      );\n      \n      // Should be clamped to max zoom (3.0), not 10.0\n      expect(zoomService.zoomLevel, equals(3.0));\n    });\n\n    test('should have correct zoom step', () {\n      expect(zoomService.zoomStep, equals(0.1));\n    });\n\n    test('should dispose without errors', () {\n      expect(() => zoomService.dispose(), returnsNormally);\n    });\n  });\n}\n