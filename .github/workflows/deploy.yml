name: Build and Deploy to Play Store

on:
  release:
    types: [published]
  
  # Allow manual triggering for testing
  workflow_dispatch:
    inputs:
      track:
        description: 'Deployment track (internal/alpha/beta/production)'
        required: true
        default: 'internal'
        type: choice
        options:
        - internal
        - alpha
        - beta
        - production

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.32.0'
        channel: 'stable'
        cache: true
        
    - name: Verify Flutter installation
      run: |
        flutter --version
        flutter doctor -v
        
    - name: Get Flutter dependencies
      run: flutter pub get
      
    # Temporarily skip analyze until code cleanup is complete
    # - name: Analyze code
    #   run: flutter analyze
      
    - name: Run unit tests
      run: flutter test
      
    - name: Run widget tests
      run: flutter test test/widget/
      
  build-and-deploy:
    name: Build and Deploy to Play Store
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.32.0'
        channel: 'stable'
        cache: true
        
    - name: Get Flutter dependencies
      run: flutter pub get
      
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'zulu'
        java-version: '17'
        
    - name: Decode keystore
      run: |
        echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > android/app/upload-keystore-puzzlenook.p12
        
    - name: Create key.properties
      run: |
        echo "storePassword=${{ secrets.KEYSTORE_PASSWORD }}" > android/key.properties
        echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> android/key.properties
        echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> android/key.properties
        echo "storeFile=upload-keystore-puzzlenook.p12" >> android/key.properties
        
    - name: Determine deployment track
      id: track
      run: |
        # Default to internal
        TRACK="internal"
        
        # Check manual input first (highest priority)
        if [ "${{ github.event.inputs.track }}" != "" ]; then
          TRACK="${{ github.event.inputs.track }}"
          echo "Using manual track selection: $TRACK"
        # Check tag pattern for automatic selection
        elif [ "${{ github.event_name }}" = "release" ]; then
          TAG_NAME="${{ github.event.release.tag_name }}"
          echo "Analyzing tag: $TAG_NAME"
          
          if [[ $TAG_NAME =~ ^v[0-9]+\.[0-9]+\.[0-9]+-alpha(\.[0-9]+)?$ ]]; then
            TRACK="alpha"
            echo "Alpha release detected"
          elif [[ $TAG_NAME =~ ^v[0-9]+\.[0-9]+\.[0-9]+-beta(\.[0-9]+)?$ ]]; then
            TRACK="beta"
            echo "Beta release detected (closed testing)"
          elif [[ $TAG_NAME =~ ^v[0-9]+\.[0-9]+\.[0-9]+-rc(\.[0-9]+)?$ ]]; then
            TRACK="beta"
            echo "Release candidate detected (deploying to beta)"
          elif [[ $TAG_NAME =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            TRACK="production"
            echo "Production release detected"
          else
            TRACK="internal"
            echo "Unknown tag pattern, defaulting to internal"
          fi
        else
          echo "Manual trigger without track specified, using internal"
        fi
        
        echo "TRACK=$TRACK" >> $GITHUB_OUTPUT
        echo "🚀 Deploying to track: $TRACK"
        
    - name: Production release confirmation
      if: steps.track.outputs.TRACK == 'production'
      run: |
        echo "⚠️  PRODUCTION RELEASE DETECTED"
        echo "This will deploy to the production track on Google Play Store"
        echo "Tag: ${{ github.event.release.tag_name }}"
        echo "Proceeding with production deployment..."
        
    - name: Extract version from tag
      id: version
      run: |
        if [ "${{ github.event_name }}" = "release" ]; then
          TAG_NAME=${{ github.event.release.tag_name }}
        else
          TAG_NAME=$(git describe --tags --abbrev=0 || echo "v0.1.0")
        fi
        # Extract base version (remove pre-release suffixes)
        VERSION_NAME=${TAG_NAME#v}
        VERSION_NAME=${VERSION_NAME%%-*}  # Remove everything after first dash
        echo "VERSION_NAME=$VERSION_NAME" >> $GITHUB_OUTPUT
        echo "Version: $VERSION_NAME"
        
    - name: Update version in files
      run: |
        # Generate timestamp-based version code (YYMMDDHHMM format)
        # YY = years since 2025 (2025=00, 2026=01, etc.)
        # This ensures version codes are always increasing across years and deployment methods
        CURRENT_YEAR=$(date -u +"%Y")
        YEAR_OFFSET=$((CURRENT_YEAR - 2025))
        TIMESTAMP_VERSION_CODE=$(printf "%02d%s" $YEAR_OFFSET $(date -u +"%m%d%H%M"))
        # Remove leading zeros to ensure it's treated as a number
        VERSION_CODE=$((10#$TIMESTAMP_VERSION_CODE))
        
        echo "🔢 Using timestamp-based version code: $VERSION_CODE (Year offset: $YEAR_OFFSET, UTC: $(date -u +'%Y-%m-%d %H:%M'))"
        
        # Update pubspec.yaml
        sed -i "s/^version:.*/version: ${{ steps.version.outputs.VERSION_NAME }}+${VERSION_CODE}/" pubspec.yaml
        
        # Update build.gradle.kts
        sed -i "s/versionCode = [0-9]\+/versionCode = ${VERSION_CODE}/" android/app/build.gradle.kts
        sed -i "s/versionName = \"[^\"]*\"/versionName = \"${{ steps.version.outputs.VERSION_NAME }}\"/" android/app/build.gradle.kts
        
        # Verify the changes
        echo "📋 Updated pubspec.yaml:"
        grep "^version:" pubspec.yaml
        echo "📋 Updated build.gradle.kts:"
        grep -E "versionCode|versionName" android/app/build.gradle.kts
        
    - name: Build App Bundle
      run: flutter build appbundle --release
      
    - name: Upload to Play Store
      uses: r0adkll/upload-google-play@v1
      with:
        serviceAccountJsonPlainText: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON }}
        packageName: com.tinkerplexlabs.puzzlenook
        releaseFiles: build/app/outputs/bundle/release/app-release.aab
        track: ${{ steps.track.outputs.TRACK }}
        status: completed
        inAppUpdatePriority: 2
        whatsNewDirectory: distribution/whatsnew
        releaseName: ${{ steps.version.outputs.VERSION_NAME }}
